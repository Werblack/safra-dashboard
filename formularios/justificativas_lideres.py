import streamlit as st
import pandas as pd
import io
from pathlib import Path
import sys
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import unicodedata

sys.path.append(str(Path(__file__).parent.parent))
from config.settings import config

def aplicar_estilo_formulario():
    """CSS espec√≠fico para o formul√°rio"""
    st.markdown("""
    <style>
    .formulario-header {
        background: linear-gradient(135deg, rgb(255, 99, 99) 0%, rgb(255, 182, 193) 100%);
        padding: 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
    }
    
    .polo-card {
        background: linear-gradient(135deg, rgb(255, 255, 255) 0%, rgb(248, 249, 250) 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 4px solid rgb(255, 231, 45);
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .polo-card-critico {
        border-left-color: rgb(255, 99, 99) !important;
    }
    
    .polo-card-atencao {
        border-left-color: rgb(255, 231, 45) !important;
    }
    
    .polo-card-ok {
        border-left-color: rgb(158, 213, 158) !important;
    }
    
    .metrica-polo {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgb(240, 240, 240);
    }
    
    .metrica-polo:last-child {
        border-bottom: none;
    }
    
    .campo-obrigatorio {
        color: rgb(255, 99, 99);
        font-weight: bold;
    }
    
    .info-semana {
        background: linear-gradient(135deg, rgb(158, 213, 158) 0%, rgb(212, 225, 103) 100%);
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        text-align: center;
    }
    </style>
    """, unsafe_allow_html=True)

def calcular_semana_ano(data=None):
    """Calcula semana do ano e per√≠odo"""
    if data is None:
        data = datetime.now()
    
    semana = data.isocalendar()[1]
    ano = data.year
    
    # Calcular in√≠cio e fim da semana
    inicio_semana = data - timedelta(days=data.weekday())
    fim_semana = inicio_semana + timedelta(days=6)
    
    periodo = f"{inicio_semana.strftime('%d/%m')} a {fim_semana.strftime('%d/%m')}"
    
    return semana, ano, periodo

def remover_acentos(texto):
    if pd.isna(texto):
        return ""
    texto = str(texto)
    return unicodedata.normalize('NFD', texto).encode('ascii', 'ignore').decode('ascii')

def normalizar_provider(provider):
    if pd.isna(provider):
        return ""
    provider_str = str(provider).strip().upper()
    if provider_str.startswith('POLO '):
        provider_str = provider_str[5:]
    provider_str = remover_acentos(provider_str)
    return provider_str

def normalizar_polo_sap(polo_sap):
    if pd.isna(polo_sap):
        return ""
    polo_str = str(polo_sap).strip().upper()
    polo_str = remover_acentos(polo_str)
    return polo_str

def calcular_metricas_polo(df_polo):
    """Calcula m√©tricas de um polo espec√≠fico"""
    if df_polo.empty:
        return {
            'total_em_aberto': 0,
            'em_atraso': 0,
            'perc_atraso': 0.0
        }
    
    total_em_aberto = len(df_polo)
    
    if 'SLA Cliente' in df_polo.columns:
        sla_validos = pd.to_numeric(df_polo['SLA Cliente'], errors='coerce').dropna()
        if not sla_validos.empty:
            em_atraso = len(sla_validos[sla_validos >= 2])
            perc_atraso = round((em_atraso / total_em_aberto * 100), 1) if total_em_aberto > 0 else 0.0
        else:
            em_atraso = 0
            perc_atraso = 0.0
    else:
        em_atraso = 0
        perc_atraso = 0.0
    
    return {
        'total_em_aberto': total_em_aberto,
        'em_atraso': em_atraso,
        'perc_atraso': perc_atraso
    }

def salvar_justificativas_excel(dados_formulario):
    """Salva justificativas em Excel na pasta compartilhada"""
    
    # Criar pasta se n√£o existir
    pasta_justificativas = Path("data/justificativas")
    pasta_justificativas.mkdir(parents=True, exist_ok=True)
    
    # Nome do arquivo com timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    nome_arquivo = f"{timestamp}_{dados_formulario['lider'].replace(' ', '_')}_S{dados_formulario['semana']}.xlsx"
    
    caminho_arquivo = pasta_justificativas / nome_arquivo
    
    # Preparar dados para Excel
    dados_excel = []
    
    for polo_info in dados_formulario['polos']:
        dados_excel.append({
            'Data': dados_formulario['data'],
            'Semana': dados_formulario['semana'],
            'Lider': dados_formulario['lider'],
            'Polo': polo_info['nome'],
            'Ordens_Em_Aberto': polo_info['metricas']['total_em_aberto'],
            'Ordens_Em_Atraso': polo_info['metricas']['em_atraso'],
            'Perc_Atraso': polo_info['metricas']['perc_atraso'],
            'Justificativa': polo_info['justificativa'],
            'Acao_Corretiva': polo_info['acao_corretiva'],
            'Observacoes': dados_formulario['observacoes']
        })
    
    # Salvar em Excel
    df_excel = pd.DataFrame(dados_excel)
    df_excel.to_excel(caminho_arquivo, index=False)
    
    return caminho_arquivo

def enviar_notificacao_email(dados_formulario, caminho_arquivo):
    """Envia notifica√ß√£o por email (configurar conforme seu ambiente)"""
    
    try:
        # Configura√ß√µes do email (AJUSTAR CONFORME SEU AMBIENTE)
        smtp_server = "smtp.gmail.com"  # ou servidor da empresa
        smtp_port = 587
        email_remetente = "dashboard.safra@empresa.com"  # CONFIGURAR
        senha_remetente = "sua_senha_app"  # CONFIGURAR
        email_destinatario = "seu.email@empresa.com"  # SEU EMAIL
        
        # Criar mensagem
        msg = MIMEMultipart()
        msg['From'] = email_remetente
        msg['To'] = email_destinatario
        msg['Subject'] = f"üìã Justificativas - {dados_formulario['lider']} - Semana {dados_formulario['semana']}"
        
        # Resumo dos polos
        resumo_polos = "\n".join([
            f"‚Ä¢ {polo['nome']}: {polo['metricas']['em_atraso']} atrasos ({polo['metricas']['perc_atraso']:.1f}%)"
            for polo in dados_formulario['polos']
            if polo['metricas']['perc_atraso'] > 0
        ])
        
        # Corpo do email
        corpo_email = f"""
üìã NOVA JUSTIFICATIVA RECEBIDA

üë§ L√≠der: {dados_formulario['lider']}
üìÖ Data: {dados_formulario['data']}
üìä Semana: {dados_formulario['semana']} ({dados_formulario['periodo']})
üè¢ Polos: {len(dados_formulario['polos'])} polos analisados

‚ö†Ô∏è Polos com Atraso:
{resumo_polos}

üìÅ Arquivo: {caminho_arquivo.name}
üìÇ Pasta: {caminho_arquivo.parent}

üí¨ Observa√ß√µes: {dados_formulario['observacoes']}

---
Dashboard Safra - Sistema Autom√°tico
        """
        
        msg.attach(MIMEText(corpo_email, 'plain'))
        
        # Anexar Excel
        with open(caminho_arquivo, "rb") as attachment:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment.read())
        
        encoders.encode_base64(part)
        part.add_header(
            'Content-Disposition',
            f'attachment; filename= "{caminho_arquivo.name}"'
        )
        msg.attach(part)
        
        # Enviar email (DESCOMENTE E CONFIGURE)
        # server = smtplib.SMTP(smtp_server, smtp_port)
        # server.starttls()
        # server.login(email_remetente, senha_remetente)
        # text = msg.as_string()
        # server.sendmail(email_remetente, email_destinatario, text)
        # server.quit()
        
        return True
        
    except Exception as e:
        st.error(f"Erro ao enviar email: {e}")
        return False

def carregar_dados_dashboard():
    """Carrega dados do dashboard ou arquivos diretos"""
    
    # Tentar usar dados do session_state primeiro
    if 'dados_dashboard' in st.session_state:
        return st.session_state['dados_dashboard']
    
    # Fallback: carregar dados diretamente
    try:
        df_hoje = pd.read_excel('data/input/Relatorio_Diario1.xlsx')
        df_mapeamento = pd.read_excel('data/input/pagresolve_regionais.xlsx')
        
        # Excluir TEFTI
        df_hoje = df_hoje[df_hoje['Provider'] != 'TEFTI'].copy()
        
        # Processar com l√≠der
        df_hoje['Provider_Normalizado'] = df_hoje['Provider'].apply(normalizar_provider)
        df_mapeamento['Polo_SAP_Normalizado'] = df_mapeamento['Polo + SAP'].apply(normalizar_polo_sap)
        
        df_hoje_com_lider = df_hoje.merge(
            df_mapeamento[['Polo_SAP_Normalizado', 'L√≠der PagResolve']],
            left_on='Provider_Normalizado',
            right_on='Polo_SAP_Normalizado',
            how='left'
        ).rename(columns={'L√≠der PagResolve': 'Lider'})
        
        return {
            'df_hoje_com_lider': df_hoje_com_lider,
            'df_mapeamento': df_mapeamento,
            'metricas_hoje': {}
        }
        
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Formul√°rio de Justificativas", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

aplicar_estilo_formulario()

# Header do formul√°rio
semana, ano, periodo = calcular_semana_ano()

st.markdown(f"""
<div class="formulario-header">
    <h1>üìã Formul√°rio de Justificativas</h1>
    <p>Sistema de Accountability para L√≠deres Safra</p>
</div>
""", unsafe_allow_html=True)

# Informa√ß√µes da semana
st.markdown(f"""
<div class="info-semana">
    <h3>üìÖ Informa√ß√µes do Per√≠odo</h3>
    <p><strong>Data:</strong> {datetime.now().strftime('%d/%m/%Y')}</p>
    <p><strong>Semana:</strong> Semana {semana} de {ano} ({periodo})</p>
</div>
""", unsafe_allow_html=True)

# Carregar dados
dados_dashboard = carregar_dados_dashboard()

if dados_dashboard is None:
    st.error("‚ùå N√£o foi poss√≠vel carregar os dados do dashboard")
    st.stop()

df_hoje_com_lider = dados_dashboard['df_hoje_com_lider']
df_mapeamento = dados_dashboard['df_mapeamento']

# Verificar se h√° l√≠deres
lideres_disponiveis = sorted(df_hoje_com_lider['Lider'].dropna().unique().tolist())

if not lideres_disponiveis:
    st.error("‚ùå Nenhum l√≠der encontrado nos dados")
    st.stop()

# SE√á√ÉO 1: Sele√ß√£o do L√≠der
st.markdown('<h3>üë§ Identifica√ß√£o do L√≠der</h3>', unsafe_allow_html=True)

lider_selecionado = st.selectbox(
    "Selecione seu nome:",
    lideres_disponiveis,
    help="Selecione o l√≠der respons√°vel pelas justificativas"
)

if lider_selecionado:
    # Filtrar dados do l√≠der
    df_lider = df_hoje_com_lider[df_hoje_com_lider['Lider'] == lider_selecionado].copy()
    
    if df_lider.empty:
        st.warning("‚ö†Ô∏è Nenhum polo encontrado para este l√≠der")
        st.stop()
    
    # Obter polos do l√≠der
    polos_lider = df_lider['Provider'].unique()
    
    st.success(f"‚úÖ L√≠der selecionado: **{lider_selecionado}**")
    st.info(f"üè¢ Polos sob sua responsabilidade: **{len(polos_lider)}** polos")
    
    # SE√á√ÉO 2: Polos e M√©tricas
    st.markdown('<h3>üè¢ Polos e Justificativas</h3>', unsafe_allow_html=True)
    
    # Inicializar dados do formul√°rio
    dados_formulario = {
        'data': datetime.now().strftime('%d/%m/%Y'),
        'semana': semana,
        'periodo': periodo,
        'lider': lider_selecionado,
        'polos': []
    }
    
    # Para cada polo do l√≠der
    for i, polo in enumerate(polos_lider):
        # Filtrar dados do polo
        df_polo = df_lider[df_lider['Provider'] == polo].copy()
        
        # Calcular m√©tricas do polo
        metricas_polo = calcular_metricas_polo(df_polo)
        
        # Determinar criticidade
        if metricas_polo['perc_atraso'] >= 30:
            classe_card = "polo-card-critico"
            emoji_status = "üî¥"
        elif metricas_polo['perc_atraso'] >= 20:
            classe_card = "polo-card-atencao"
            emoji_status = "üü°"
        else:
            classe_card = "polo-card-ok"
            emoji_status = "üü¢"
        
        # Card do polo
        st.markdown(f"""
        <div class="polo-card {classe_card}">
            <h4>{emoji_status} {polo}</h4>
            <div class="metrica-polo">
                <span>üìä Ordens em Aberto:</span>
                <span><strong>{metricas_polo['total_em_aberto']:,}</strong></span>
            </div>
            <div class="metrica-polo">
                <span>‚ö†Ô∏è Em Atraso (‚â•2 dias):</span>
                <span><strong>{metricas_polo['em_atraso']:,} ({metricas_polo['perc_atraso']:.1f}%)</strong></span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Campos de justificativa
        col1, col2 = st.columns(2)
        
        with col1:
            # Justificativa (obrigat√≥ria se % > 20%)
            obrigatorio_justificativa = metricas_polo['perc_atraso'] >= 20
            label_justificativa = f"üìù Justificativa para {polo}"
            if obrigatorio_justificativa:
                label_justificativa += " *"
            
            justificativa = st.text_area(
                label_justificativa,
                key=f"justificativa_{i}",
                height=100,
                help="Explique os motivos dos atrasos ou desvios operacionais" + 
                     (" (OBRIGAT√ìRIO - % atraso ‚â• 20%)" if obrigatorio_justificativa else "")
            )
        
        with col2:
            # A√ß√£o corretiva (obrigat√≥ria se % > 20%)
            obrigatorio_acao = metricas_polo['perc_atraso'] >= 20
            label_acao = f"üîß A√ß√£o Corretiva para {polo}"
            if obrigatorio_acao:
                label_acao += " *"
            
            acao_corretiva = st.text_area(
                label_acao,
                key=f"acao_{i}",
                height=100,
                help="Descreva as a√ß√µes corretivas ou suporte necess√°rio" + 
                     (" (OBRIGAT√ìRIO - % atraso ‚â• 20%)" if obrigatorio_acao else "")
            )
        
        # Adicionar aos dados do formul√°rio
        dados_formulario['polos'].append({
            'nome': polo,
            'metricas': metricas_polo,
            'justificativa': justificativa,
            'acao_corretiva': acao_corretiva,
            'obrigatorio_justificativa': obrigatorio_justificativa,
            'obrigatorio_acao': obrigatorio_acao
        })
        
        st.markdown("---")
    
    # SE√á√ÉO 3: Observa√ß√µes Gerais
    st.markdown('<h3>üí¨ Observa√ß√µes Gerais</h3>', unsafe_allow_html=True)
    
    observacoes = st.text_area(
        "Coment√°rios adicionais (opcional):",
        height=100,
        help="Campo livre para observa√ß√µes gerais sobre a semana"
    )
    
    dados_formulario['observacoes'] = observacoes
    
    # SE√á√ÉO 4: Valida√ß√£o e Envio
    st.markdown('<h3>üì§ Envio das Justificativas</h3>', unsafe_allow_html=True)
    
    # Validar formul√°rio
    def validar_formulario():
        erros = []
        
        for polo_info in dados_formulario['polos']:
            if polo_info['obrigatorio_justificativa'] and not polo_info['justificativa'].strip():
                erros.append(f"Justificativa obrigat√≥ria para {polo_info['nome']} (% atraso ‚â• 20%)")
            
            if polo_info['obrigatorio_acao'] and not polo_info['acao_corretiva'].strip():
                erros.append(f"A√ß√£o corretiva obrigat√≥ria para {polo_info['nome']} (% atraso ‚â• 20%)")
        
        return erros
    
    # Mostrar resumo antes do envio
    with st.expander("üìã Resumo das Justificativas", expanded=False):
        st.write(f"**L√≠der:** {lider_selecionado}")
        st.write(f"**Data:** {dados_formulario['data']}")
        st.write(f"**Semana:** {dados_formulario['semana']} ({dados_formulario['periodo']})")
        st.write(f"**Polos analisados:** {len(dados_formulario['polos'])}")
        
        polos_com_atraso = [p for p in dados_formulario['polos'] if p['metricas']['perc_atraso'] > 0]
        st.write(f"**Polos com atraso:** {len(polos_com_atraso)}")
        
        if polos_com_atraso:
            for polo in polos_com_atraso:
                st.write(f"‚Ä¢ {polo['nome']}: {polo['metricas']['em_atraso']} atrasos ({polo['metricas']['perc_atraso']:.1f}%)")
    
    # Bot√µes de a√ß√£o
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("üì§ Enviar Justificativas", type="primary"):
            # Validar formul√°rio
            erros = validar_formulario()
            
            if erros:
                st.error("‚ùå Corrija os seguintes erros:")
                for erro in erros:
                    st.error(f"‚Ä¢ {erro}")
            else:
                try:
                    # Salvar em Excel
                    caminho_arquivo = salvar_justificativas_excel(dados_formulario)
                    
                    # Enviar notifica√ß√£o por email
                    email_enviado = enviar_notificacao_email(dados_formulario, caminho_arquivo)
                    
                    # Feedback de sucesso
                    st.success("‚úÖ Justificativas enviadas com sucesso!")
                    st.info(f"üìÅ Arquivo salvo: {caminho_arquivo.name}")
                    
                    if email_enviado:
                        st.success("üìß Notifica√ß√£o enviada por email!")
                    else:
                        st.warning("‚ö†Ô∏è Arquivo salvo, mas email n√£o configurado")
                    
                    # Mostrar informa√ß√µes do arquivo
                    st.markdown(f"""
                    **üìã Detalhes do Envio:**
                    - **Arquivo:** {caminho_arquivo.name}
                    - **Localiza√ß√£o:** {caminho_arquivo.parent}
                    - **Tamanho:** {caminho_arquivo.stat().st_size} bytes
                    - **Data/Hora:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
                    """)
                    
                    # Limpar formul√°rio ap√≥s 3 segundos
                    import time
                    time.sleep(3)
                    st.experimental_rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao enviar justificativas: {e}")
    
    with col2:
        if st.button("üîÑ Limpar Formul√°rio"):
            st.experimental_rerun()
    
    with col3:
        st.info("üí° Campos marcados com * s√£o obrigat√≥rios para polos com % atraso ‚â• 20%")
    
    # SE√á√ÉO 5: Instru√ß√µes e Ajuda
    with st.expander("‚ùì Instru√ß√µes de Preenchimento", expanded=False):
        st.markdown("""
        ### üìã Como Preencher o Formul√°rio
        
        **1. Identifica√ß√£o**
        - Selecione seu nome na lista de l√≠deres
        - O sistema carregar√° automaticamente seus polos
        
        **2. Justificativas por Polo**
        - **Justificativa:** Explique os motivos dos atrasos (obrigat√≥rio se % ‚â• 20%)
        - **A√ß√£o Corretiva:** Descreva as a√ß√µes para resolver (obrigat√≥rio se % ‚â• 20%)
        
        **3. Observa√ß√µes Gerais**
        - Campo livre para coment√°rios adicionais sobre a semana
        
        **4. Envio**
        - Revise o resumo antes de enviar
        - O sistema salvar√° em Excel e enviar√° notifica√ß√£o
        
        ### üéØ Crit√©rios de Obrigatoriedade
        - **üî¥ Cr√≠tico (‚â•30%):** Justificativa e a√ß√£o obrigat√≥rias
        - **üü° Aten√ß√£o (‚â•20%):** Justificativa e a√ß√£o obrigat√≥rias  
        - **üü¢ Normal (<20%):** Justificativa opcional
        
        ### üìß Notifica√ß√µes
        - Email autom√°tico ser√° enviado para a gest√£o
        - Arquivo Excel anexado com todos os detalhes
        - Hist√≥rico preservado na pasta compartilhada
        """)
    
    # SE√á√ÉO 6: Hist√≥rico (se dispon√≠vel)
    with st.expander("üìö Hist√≥rico de Justificativas", expanded=False):
        try:
            pasta_justificativas = Path("data/justificativas")
            if pasta_justificativas.exists():
                arquivos_historico = list(pasta_justificativas.glob("*.xlsx"))
                
                if arquivos_historico:
                    st.write("**√öltimas justificativas enviadas:**")
                    
                    # Mostrar √∫ltimos 10 arquivos
                    arquivos_recentes = sorted(arquivos_historico, key=lambda x: x.stat().st_mtime, reverse=True)[:10]
                    
                    for arquivo in arquivos_recentes:
                        # Extrair informa√ß√µes do nome do arquivo
                        nome_parts = arquivo.stem.split('_')
                        if len(nome_parts) >= 3:
                            data_envio = nome_parts[0]
                            hora_envio = nome_parts[1]
                            lider_nome = ' '.join(nome_parts[2:-1])
                            semana_info = nome_parts[-1]
                            
                            data_formatada = f"{data_envio[:2]}/{data_envio[2:4]}/{data_envio[4:8]}"
                            hora_formatada = f"{hora_envio[:2]}:{hora_envio[2:4]}"
                            
                            st.write(f"‚Ä¢ {data_formatada} {hora_formatada} - {lider_nome} - {semana_info}")
                else:
                    st.info("Nenhuma justificativa anterior encontrada")
            else:
                st.info("Pasta de hist√≥rico n√£o encontrada")
                
        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel carregar hist√≥rico: {e}")

else:
    st.warning("‚ö†Ô∏è Selecione um l√≠der para continuar")

# Footer
st.markdown("---")
st.markdown(
    '<div style="text-align: center; color: rgb(51, 51, 51); opacity: 0.7; margin-top: 2rem;">'
    'Formul√°rio de Justificativas Safra ‚Ä¢ Sistema de Accountability ‚Ä¢ Julho/2025'
    '</div>', 
    unsafe_allow_html=True
)

# Bot√£o para voltar ao dashboard
st.markdown('<br>', unsafe_allow_html=True)
if st.button("üîô Voltar ao Dashboard"):
    st.switch_page("dashboard/app_dashboard.py")

