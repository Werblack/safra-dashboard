import pandas as pd
import logging
from pathlib import Path
from typing import Optional, Dict, Any
import sys
import os

# Adicionar config ao path
sys.path.append(str(Path(__file__).parent.parent.parent))
from config.settings import config

class SafraExtractor:
    """Extrator de dados otimizado e robusto"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def extrair_relatorio_diario(self, arquivo_path: Optional[str] = None) -> pd.DataFrame:
        """Extrai dados do relat√≥rio di√°rio com valida√ß√£o robusta"""
        if arquivo_path is None:
            arquivo_path = config.INPUT_DIR / config.RELATORIO_DIARIO
        
        try:
            self.logger.info(f"üîÑ Extraindo relat√≥rio di√°rio: {arquivo_path}")
            
            if not Path(arquivo_path).exists():
                raise FileNotFoundError(f"Arquivo n√£o encontrado: {arquivo_path}")
            
            df = pd.read_excel(
                arquivo_path,
                sheet_name=0,
                na_values=['', ' ', 'N/A', 'n/a', '#N/D', '#REF!', '#VALOR!'],
                keep_default_na=True
            )
            
            if df.empty:
                raise ValueError("Arquivo est√° vazio")
            
            if 'Ordem PagBank' not in df.columns:
                raise ValueError("Coluna 'Ordem PagBank' n√£o encontrada")
            
            self.logger.info(f"‚úÖ Extra√≠dos {len(df):,} registros do relat√≥rio di√°rio")
            return df
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao extrair relat√≥rio di√°rio: {e}")
            raise
    
    def extrair_base_historica(self) -> pd.DataFrame:
        """Extrai base hist√≥rica ou cria uma nova se n√£o existir"""
        arquivo_historico = config.PROCESSED_DIR / config.BASE_HISTORICA
        
        try:
            if arquivo_historico.exists():
                self.logger.info(f"üîÑ Carregando base hist√≥rica: {arquivo_historico}")
                df = pd.read_parquet(arquivo_historico)
                self.logger.info(f"‚úÖ Base hist√≥rica carregada: {len(df):,} registros")
                return df
            else:
                self.logger.info("üìù Base hist√≥rica n√£o existe, ser√° criada no primeiro processamento")
                return pd.DataFrame()
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao carregar base hist√≥rica: {e}")
            return pd.DataFrame()
